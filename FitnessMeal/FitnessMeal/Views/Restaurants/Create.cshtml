@model FitnessMeal.Models.Restaurant

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>

<h4>Restaurant</h4>
<hr />
<div class="row">

    <div class="col-md-6">
        <label class="" for="selectaddress">Search Address or Click on Map</label>
        <div name="selectaddress">

            <input class="inputbox col-md-9" id="address" type="text">
            <button class="btn btn-success" id='search'>Search</button>

        </div>
        <div id="map"></div>
    </div>

    <div class="col-md-6">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })


            @Html.EditorFor(model => model.USER_ID, new { htmlAttributes = new { @class = "form-control hidden" } })

            <div class="form-group">
                @Html.LabelFor(model => model.RESTAURANT_NAME, htmlAttributes: new { @class = "control-label col-md-2" })
                <div>
                    @Html.EditorFor(model => model.RESTAURANT_NAME, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RESTAURANT_NAME, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DESCRIPTION, htmlAttributes: new { @class = "control-label col-md-2" })
                <div>
                    @Html.EditorFor(model => model.DESCRIPTION, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DESCRIPTION, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Main_CUSINE, htmlAttributes: new { @class = "control-label col-md-2" })
                <div>
                    @Html.DropDownListFor(model => model.Main_CUSINE, ViewBag.CUSINES as SelectList, "--Select Cuisine--", new { @class = "form-control" });
                    @Html.ValidationMessageFor(model => model.Main_CUSINE, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                <lable class="control-label col-md-2" for="ADRESS_FIRST_LINE">Unit No./Room No./Shop No.</lable>
                <div>
                    @Html.EditorFor(model => model.ADRESS_FIRST_LINE, new { htmlAttributes = new { @class = "form-control", @placeholder = "Room No./Unit No. Leave empty if don't have" } })
                    @Html.ValidationMessageFor(model => model.ADRESS_FIRST_LINE, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group ">
                <lable class="control-label col-md-2" for="selectedAdress">Your selected adress(Must contain street No.)</lable>
                <input class="inputbox-disabled" disabled id="selectedAdress" placeholder="Please select address through map" type="text">
            </div>
            <div class="form-group ">
                @Html.ValidationMessage("STREET_NO", "", new { @class = "text-danger" })
                @Html.ValidationMessage("STREET_RD", "", new { @class = "text-danger" })
                @Html.ValidationMessage("SURBURB", "", new { @class = "text-danger" })
                @Html.ValidationMessage("POSTCODE", "", new { @class = "text-danger" })
                @Html.ValidationMessage("STATE", "", new { @class = "text-danger" })
                @Html.ValidationMessage("LATITUDE", "", new { @class = "text-danger" })
                @Html.ValidationMessage("LONGITUDE", "", new { @class = "text-danger" })


            </div>
            <div class="form-group hidden">
                @Html.LabelFor(model => model.STREET_NO, htmlAttributes: new { @class = "control-label col-md-2" })
                <div>
                    @Html.EditorFor(model => model.STREET_NO, new { htmlAttributes = new { @class = "form-control", @id = "theStreet_No" } })

                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.STREET_RD, htmlAttributes: new { @class = "control-label col-md-2" })
                <div>
                    @Html.EditorFor(model => model.STREET_RD, new { htmlAttributes = new { @class = "form-control", @id = "theStreet" } })

                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.SURBURB, htmlAttributes: new { @class = "control-label col-md-2" })
                <div>
                    @Html.EditorFor(model => model.SURBURB, new { htmlAttributes = new { @class = "form-control", @id = "theSurburb" } })

                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.POSTCODE, htmlAttributes: new { @class = "control-label col-md-2" })
                <div>
                    @Html.EditorFor(model => model.POSTCODE, new { htmlAttributes = new { @class = "form-control", @id = "thePostcode" } })

                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.STATE, htmlAttributes: new { @class = "control-label col-md-2" })
                <div>
                    @Html.EditorFor(model => model.STATE, new { htmlAttributes = new { @class = "form-control", @id = "theState" } })

                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.LATITUDE, htmlAttributes: new { @class = "control-label col-md-2" })
                <div>
                    @Html.EditorFor(model => model.LATITUDE, new { htmlAttributes = new { @class = "form-control", @id = "theLat" } })

                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.LONGITUDE, htmlAttributes: new { @class = "control-label col-md-2" })
                <div>
                    @Html.EditorFor(model => model.LONGITUDE, new { htmlAttributes = new { @class = "form-control", @id = "theLng" } })

                </div>
            </div>



            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>

        </div>
        }
    </div>


</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script async
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCdniQ6G8exQ_38DM0nbEigXUDmh6mscEc&callback=initMap">
    </script>
    <script defer>
        $.validator.setDefaults({
            ignore: [],
            // any other default options and/or rules
        });
        
        var cenLat = -34.397
        var cenLng = 150.644
        var theZoom = 6

        function successFunction(result) {
            if (result.status == "OK") {

                cenLat = result.results[0].geometry.location.lat;
                cenLng = result.results[0].geometry.location.lng;
                map.setCenter({ lat: cenLat, lng: cenLng });
                map.setZoom(15)
                infoWindow.setContent("Address selected: " + result.results[0].formatted_address);
                infoWindow.setPosition({ lat: cenLat, lng: cenLng })
                infoWindow.open(map);

                $("#selectedAdress").val(result.results[0].formatted_address)
                console.log(result.results[0].address_components);

                $("#theLat").val(cenLat);
                $("#theLng").val(cenLng);

                result.results[0].address_components.forEach(function (theCom) {
                    console.log(theCom);
                    console.log(theCom.types[0]);
                    if (theCom.types[0] == "street_number") {
                        $("#theStreet_No").val(theCom.short_name);
                    }
                    else if (theCom.types[0] == "route") {
                        $("#theStreet").val(theCom.short_name);
                    }
                    else if (theCom.types[0] == "locality") {
                        $("#theSurburb").val(theCom.short_name);
                    }
                    else if (theCom.types[0] == "administrative_area_level_1") {
                        $("#theState").val(theCom.short_name);
                    }
                    else if (theCom.types[0] == "postal_code") {
                        $("#thePostcode").val(theCom.short_name);
                    }
                });
            }
            else {
                infoWindow.setContent("Adress not found, please try again");
            }
        }

        var map, infoWindow;
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: cenLat, lng: cenLng },
                zoom: theZoom
            });
            var geocoder = new google.maps.Geocoder();

            google.maps.event.addListener(map, 'click', function (event) {

                var theLat = event.latLng.lat();
                var theLng = event.latLng.lng();
                var theUrl = "https://maps.googleapis.com/maps/api/geocode/json?latlng=" + theLat + "," + theLng + "&key=AIzaSyCdniQ6G8exQ_38DM0nbEigXUDmh6mscEc"
                console.log(theUrl)
                $.ajax({
                    url: theUrl, success: function (result) {
                        successFunction(result);
                        $("#address").val(result.results[0].formatted_address)
                    }
                });

            });

            infoWindow = new google.maps.InfoWindow;

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };


                    
                    map.setCenter(pos);
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
            infoWindow.open(map);
        }

        var searchResult = ""
        var theUrl = "https://maps.googleapis.com/maps/api/geocode/json?address="
        

        
        

        $('#search').click(function () {
            var theUrl = "https://maps.googleapis.com/maps/api/geocode/json?address=" + $("#address").val().replace(" ", "+") + "&key=AIzaSyCdniQ6G8exQ_38DM0nbEigXUDmh6mscEc"

            $.ajax({
                url: theUrl, success: function (result) { successFunction(result) }
            });
        });
    </script>
}
